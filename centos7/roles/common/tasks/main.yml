- name: Set hostname to {{ hostname }}
  hostname: name={{ hostname }}
  when: hostname is defined and hostname != None


- name: Set timezone to {{ time_zone }}
  timezone: name={{ time_zone }}
  when: time_zone is defined and time_zone != None


- name: Update all packages
  package:
    name: "*"
    state: latest


- name: Install Packages; elrepo, gf repos
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - epel-release
    - yum-utils
    - http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
    - http://mirror.ghettoforge.org/distributions/gf/gf-release-latest.gf.el7.noarch.rpm


- name: Enable elrepo-kernel, elrepo-extras
  ini_file:
    dest: /etc/yum.repos.d/elrepo.repo
    section: "{{ item }}"
    option: enabled
    value: 1
  with_items:
    - elrepo-kernel
    - elrepo-extras


- name: Enable gf-plus
  ini_file:
    dest: /etc/yum.repos.d/gf.repo
    section: gf-plus
    option: enabled
    value: 1
  register: gf_plus_enable_status


- debug:
    msg: "gf_plus_enable_status: '{{ gf_plus_enable_status }}'"


- name: Update all packages due to enabled repos
  package:
    name: "*"
    state: latest
  when: gf_plus_enable_status.changed


- name: Install core packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - grub2-tools
    - yum-cron
    - python-pip
    - libselinux-python
    - net-tools
    - mc
    - screen
    - telnet
    - wget
    - rsync
    - sshfs
    - tcpdump
    - iotop
    - psmisc
    - socat


- block:
  - name: Allow the 'wheel' group do 'sudo' command without a password
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'

  - name: Add the {{ sudo_user }} user to the whell group
    user: name={{ sudo_user }} groups=wheel append=yes
  when: sudo_user is defined and sudo_user != None


- name: Selinux disable
  selinux: state=disabled
  when: selinux_disable is defined and selinux_disable == True


- block:
  - name: Get current tuned profile
    shell: tuned-adm profile_info | head -n 2 | tail -n 1
    register: current_tuned_profile
    changed_when: false

  - name: "Activate tuned profile: '{{ tuned_profile }}' (current tuned profile: '{{ current_tuned_profile.stdout }}')"
    command: tuned-adm profile {{ tuned_profile }}
    when: current_tuned_profile is defined and current_tuned_profile.stdout != tuned_profile
  when: tuned_profile is defined and ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"


- name: Logrotate with compress
  lineinfile:
    dest: /etc/logrotate.conf
    state: present
    regexp: '^compress'
    line: 'compress'


- block:
  - name: "Install the kernel: '{{ kernel_package }}'"
    package:
      name: "{{ kernel_package }}"
      state: latest
    register: kernel_package_install_status

  - debug:
      msg: "kernel_package_install_status: '{{ kernel_package_install_status }}'"

  - block:
    - name: Set the 0 kernel as a default
      shell: grub2-set-default 0 && grub2-mkconfig -o /boot/grub2/grub.cfg
      ignore_errors: true

    - name: Rebooting
      shell: sleep 2; shutdown -r now "Ansible kernel update"
      ignore_errors: true
      async: 1
      poll: 0

    - name: Wait for booting...
      wait_for:
        host: "{{ ansible_ssh_host | default(ansible_host) | default(inventory_hostnameZ) }}"
        port: "{{ ansible_ssh_port | default(22) }}"
        search_regex: SSH
        delay: 1
      vars:
        ansible_connection: local
        ansible_become: false

    - name: Remove old kernel(s)
      command: package-cleanup --oldkernels --count=1 -y
    when: kernel_package_install_status is defined and kernel_package_install_status.changed
  when: kernel_package is defined and kernel_package != None
